
# ===================================================================================================
# ===============================      GENERAL PROPERTIES      ======================================

# neural network modes:
# random
#   - use random weight matrices
# training
#   - use weight matrices from files denoted by 'neuralNetwork.weightMatrixFilePattern' property
#   - write that matrices and corresponding score (i.e. battle round results)
#       to 'neuralNetwork.scoredWeightMatrixFilePattern' files
# fighting
#   - TODO
neuralNetwork.mode=random

# maximum absolute value of a weight for a new matrices.
# new matrix consists of a random weights, uniformly distributed from -matrixMaxAbsWeight to matrixMaxAbsWeight
# this property is used as a generator, i.e. '1, 1, 2, 3' results in:
#   50% of new matrices with matrixMaxAbsWeight=1
#   25% of new matrices with matrixMaxAbsWeight=2
#   25% of new matrices with matrixMaxAbsWeight=3
neuralNetwork.matrixMaxAbsWeight=1,1,1,1,1,10,100

# is used as scorer input and trainer output.
# located in the robot's data directory, i.e. '<ROBOT_NAME>.data'
# placeholder {} will be substituted with integer values, example of actual files is:
# weight_matrix_part0.dat, weight_matrix_part1.dat, weight_matrix_part2.dat
neuralNetwork.weightMatrixFilePattern=weight_matrix_part{}.dat

# is used as scorer output and trainer input.
# located in the robot's data directory, i.e. '<ROBOT_NAME>.data'
# placeholder {} will be substituted with integer values, example of actual files is:
# scored_weight_matrix_part0.dat, scored_weight_matrix_part1.dat, scored_weight_matrix_part2.dat
neuralNetwork.scoredWeightMatrixFilePattern=scored_weight_matrix_part{}.dat


# ===================================================================================================
# ================================      SCORER PROPERTIES      ======================================

# how many rounds the robot will use the same matrix during scoring phase.
# the higher value means more precise score, but it also significantly reduces amount of matrix the robot
# can process in a reasonable amount of time
scorer.roundsPerMatrix=3

# ===================================================================================================
# ================================      TRAINER PROPERTIES      =====================================

# what file to use as trainer input. allowed values:
#   scoredWeightMatrix
#       - use 'neuralNetwork.scoredWeightMatrixFilePattern'
#   survivors_gen{}
#       - where {} is a generation number, e.g. survivors_gen3. use 'trainer.survivorsFilePattern' with specified generation number
#   survivors_latest
#       - use 'trainer.survivorsFilePattern' with the latest generation. e.g. if there are
#         survivors_gen0.dat, survivors_gen1.dat and survivors_gen2.dat files, use survivors_gen2.dat
#
trainer.source=scoredWeightMatrix

# how many matrices will be written to a file
# one matrix is about 1Kb
trainer.matricesPerOutputFile=1000

# file with population and survivors win ratios to compare generations performance.
# location is relative to the robot's data directory, i.e. '<ROBOT_NAME>.data',
# but the file itself should not be placed to that directory, since Robocode has a quota on robot's data files size.
trainer.winRatioFile=../data/win_ratio.dat

# file with survivors scored matrices.
# {} placeholder is resolved with generation index, the actual files will be survivors_gen0.dat, survivors_gen1.dat, ...
# location is relative to the robot's data directory, i.e. '<ROBOT_NAME>.data',
# but the file itself should not be placed to that directory, since Robocode has a quota on robot's data files size.
trainer.survivorsFilePattern=../data/survivors_gen{}.dat

# amount of population to be created during the training phase.
# other properties like survivors, crossingoverIndividuals and mutatedCopies are used to create the next generation.
# if the number of created individuals (aka weight matrices) exceeds population property value, they will be truncated.
# if the number of created individuals are less than population property value, random matrices will be added to the population.
trainer.population=200000

# TODO specify command and code to check
trainer.survivors=431
trainer.crossingoverIndividuals=40
trainer.mutatedCopies=5

# during mutation, each weight of a matrix is multiplied by randomly distributed value
# from (1 - mutationPercentage / 100) to (1 + mutationPercentage / 100)
trainer.mutationPercentage=25
