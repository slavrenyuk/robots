TASKS

1. Write down VelociRobot training stats - win percentage and Robocode score (initial / trained)

1000 rounds

VelociRobot
initial
Robocode score  38%
win percentage  29%
trained
Robocode score  84%
win percentage  96%

SuperMercutio
initial
Robocode score  16%
win percentage  12%
trained
Robocode score  72%
win percentage  98%

2. Add info about survivors  / win percentage files to MEMO.txt, it is not obvious why first generation survivors
    had 100% wins, but last generation survivors has less.
    OR remove the intermediate files at all

TECH DEBT

1. Add javadocs to Perceptron, nn, module, event packages (+ subpackages),
    then perform next iteration of adding javadocs - check methods that require documentation

2. Add project description to README file

3. Document list of Robocode bugfeatures:
    (1) OnBattleEnded, OnRoundEnded, OnDeath, OnWin are  not triggered on exception
    (2) OnRoundEnded and OnBattleEnded are triggered before OnDeath and OnWin

FEATURES

This section describes features that may be added in the future, current results are good enough anyway.

1. Currently Perceptron's behaviour is predictable, since exactly the same input parameters will lead to exactly the same actions.
    To prevent that, a new random neuron may be added, similarly to the shift neuron.
    Investigation required:
        - Do we need to add random neuron to both input and hidden neurons, or only to one of them?
        - Will that actually work, i.e. the behavior would be better?
        - Why do we need this feature? Sample enemies do not remember Perceptron's actions. Only top robots do that.
            But they are still very hard to beat. And it would be hard to train Perceptron to fight them, since we have a lot
            of rounds, and they will get a lot of information about Perceptron.

2. IN PROGRESS
    TODO:
    - add events for scoring (i.e. bullet hit)
    - introduce new property and corresponding code for switching between scoring modes
    - add unit tests for all of that
    - manually test new scoring mode:
        - correct score is added, use logging
        - the whole system works as expected
        - also perform regression smoke test for the old scoring mode

    With current scoring (win percentage, energy diff) a robot that don't fire, but only dodges bullets may get the highest score.
    But Robocode scoring is different, and such robot will not get high Robocode score.
    I will have to duplicate Robocode scoring logic, see http://robowiki.net/wiki/Robocode/Scoring
    Either make new scores compatible with previous format, or migrate survivors file to a new format.

    I tried to refactor Perceptron to extract scoring logic to plugin (as well as neural network and detecting failed rounds),
    but it becomes very complicated. Investigate another approaches. Idea is to not mess with scoring logic if it is not required,
    or use exactly the same logic we need, since it is based on robot events.